import depositos.*
import formacion.*
import locomotoras.*
import vagones.*

describe "Test Administradora Ferroviaria"{
	var locomotora1 = new Locomotora()
	var locomotora2 = new Locomotora()
	var vagonCarga1 = new VagonCarga()
	var vagonCarga2 = new VagonCarga()
	var vagonCarga3 = new VagonCarga()
	var vagonPasajeros1 = new VagonPasajero()
	var vagonPasajeros2 = new VagonPasajero()
	var vagonPasajeros3 = new VagonPasajero()
	var formacion1 = new Formacion()
	var formacion2 = new Formacion()
	var formacion3 = new Formacion()
	var deposito1 = new Deposito()

test "Formacion1 puede transportar 0 pasajeros" {
	formacion1.agregarLocomotora(locomotora1)
	formacion1.agregarVagonCarga(vagonCarga1)
	formacion1.agregarVagonCarga(vagonCarga2)
	formacion1.agregarVagonCarga(vagonCarga3)
    assert.equals(0,formacion1.limitePasajeros())
}

test "Formacion1 puede transportar 240 pasajeros"{
	formacion1.agregarLocomotora(locomotora1)
	formacion1.agregarVagonPasajeros(vagonPasajeros1)
	formacion1.agregarVagonPasajeros(vagonPasajeros2)
	formacion1.agregarVagonPasajeros(vagonPasajeros3)
	assert.equals(240,formacion1.limitePasajeros())
}

test "Hay 3 vagones de carga livianos en la formacion2" {
	formacion2.agregarLocomotora(locomotora1)
	formacion2.agregarVagonCarga(vagonCarga1)
	formacion2.agregarVagonCarga(vagonCarga2)
	formacion2.agregarVagonCarga(vagonCarga3)
	assert.equals(3,formacion2.cantVagonesLivianos())
}

test "Hay 3 vagones de pasajeros que no son livianos en la formacion3" {
	formacion3.agregarLocomotora(locomotora1)
	formacion3.agregarVagonPasajeros(vagonPasajeros1)
	formacion3.agregarVagonPasajeros(vagonPasajeros2)
	formacion3.agregarVagonPasajeros(vagonPasajeros3)
	assert.notEquals(3,formacion3.cantVagonesLivianos())
}

test "En total hay 3 vagones tanto de carga como de pasajeros que no son livianos en la formacion2" {
	vagonCarga1.cargaMaxima(2500)
	formacion2.agregarLocomotora(locomotora1)
	formacion2.agregarVagonPasajeros(vagonPasajeros1)
	formacion2.agregarVagonPasajeros(vagonPasajeros2)
	formacion2.agregarVagonCarga(vagonCarga1)
	assert.notEquals(3,formacion2.cantVagonesLivianos())
}

test "La velocidad maxima de una formacion es 80"{
	formacion1.agregarLocomotora(locomotora1)
	formacion1.agregarLocomotora(locomotora2)
	formacion1.agregarVagonPasajeros(vagonPasajeros1)
	assert.equals(80, formacion1.velocidadMaxima())
}

test "La formacion1 es eficiente"{
	formacion1.agregarLocomotora(locomotora1)
	formacion1.agregarLocomotora(locomotora2)
	formacion1.agregarVagonPasajeros(vagonPasajeros1)
	assert.that(formacion1.eficiente())
}

test "La formacion1 puede moverse" {
	formacion1.agregarLocomotora(locomotora1)
	formacion1.agregarLocomotora(locomotora2)
	formacion1.agregarVagonCarga(vagonCarga1)
	formacion1.agregarVagonPasajeros(vagonPasajeros1)
	assert.that(formacion1.puedeMoverse())
}

test "La formacion1 no puede moverse" {
	vagonCarga3.cargaMaxima(17521)
	formacion1.agregarLocomotora(locomotora1)
	formacion1.agregarLocomotora(locomotora2)
	formacion1.agregarVagonCarga(vagonCarga1)
	formacion1.agregarVagonCarga(vagonCarga2)
	formacion1.agregarVagonCarga(vagonCarga3)
	assert.notThat(formacion1.puedeMoverse())
}

test "El empuje faltante para que se pueda arrastrar es 1Kg" {
	vagonCarga3.cargaMaxima(17521)
	formacion1.agregarLocomotora(locomotora1)
	formacion1.agregarLocomotora(locomotora2)
	formacion1.agregarVagonCarga(vagonCarga1)
	formacion1.agregarVagonCarga(vagonCarga2)
	formacion1.agregarVagonCarga(vagonCarga3)
	assert.equals(1, formacion1.empujeParaMoverse())
}

test "En deposito1 hay 3 vagones pesados" {
	formacion1.agregarVagonCarga(vagonCarga1)
	formacion2.agregarVagonCarga(vagonCarga2)
	formacion3.agregarVagonCarga(vagonCarga3)
	deposito1.agregarFormacion(formacion1)
	deposito1.agregarFormacion(formacion2)
	deposito1.agregarFormacion(formacion3)
	assert.equals(3, deposito1.vagonesMasPesadosXformacion().size())
}

}